scale_fill_viridis_d(begin = 0.25) +
labs(title = "Customer Morphology") +
theme(
plot.background  = element_rect(fill = "black"),
panel.background = element_rect(fill = "black"),
legend.position  = "none",
text = element_text(color = "white"),
axis.text = element_text(color = "grey80")
)
recipe_spec_customer_prediction <- recipe(cluster ~ ., customer_clusters_tbl) %>%
step_rm(CustomerID, V1, V2, count, min, max, sum, FirstPurchase, LastPurchase) %>%
step_log(mean) %>%
step_range(mean) %>%
step_mutate(cluster = as.integer(as.character(cluster))) %>%
prep()
recipe_spec_customer_prediction %>% juice()
X <- recipe_spec_customer_prediction %>%
juice() %>%
select(-cluster) %>%
as.matrix()
Y <- recipe_spec_customer_prediction %>%
juice() %>%
pull(cluster)
X[1:10, ]
Y[1:10]
cluster_assignments <- py$cluster_assignments_km
customer_clusters_tbl <- py$X_embedded %>%
as_tibble() %>%
mutate(cluster = as.factor(cluster_assignments)) %>%
mutate(CustomerID = customer_id) %>%
left_join(
customer_habits_joined_tbl
) %>%
select(CustomerID, everything())
customer_clusters_tbl
cluster_morphology_tbl <- customer_clusters_tbl %>%
group_by(cluster) %>%
summarise_at(vars(count:LastPurchase), .funs = mean)
cluster_morphology_tbl
cluster_morphology_tbl %>%
select(cluster, count, sum, cat_0, cat_1, cat_2, cat_3, cat_4, cat_NA) %>%
ggRadar(aes(color = cluster), size = 1) +
facet_wrap(~ cluster) +
theme_minimal() +
scale_color_viridis_d(begin = 0.25) +
scale_fill_viridis_d(begin = 0.25) +
labs(title = "Customer Morphology") +
theme(
plot.background  = element_rect(fill = "black"),
panel.background = element_rect(fill = "black"),
legend.position  = "none",
text = element_text(color = "white"),
axis.text = element_text(color = "grey80")
)
recipe_spec_customer_prediction <- recipe(cluster ~ ., customer_clusters_tbl) %>%
step_rm(CustomerID, V1, V2, count, min, max, sum, FirstPurchase, LastPurchase) %>%
step_log(mean) %>%
step_range(mean) %>%
step_mutate(cluster = as.integer(as.character(cluster))) %>%
prep()
recipe_spec_customer_prediction %>% juice()
X <- recipe_spec_customer_prediction %>%
juice() %>%
select(-cluster) %>%
as.matrix()
Y <- recipe_spec_customer_prediction %>%
juice() %>%
pull(cluster)
X[1:10, ]
Y[1:10]
cluster_assignments <- py$cluster_assignments_km
customer_clusters_tbl <- py$X_embedded %>%
as_tibble() %>%
mutate(cluster = as.factor(cluster_assignments)) %>%
mutate(CustomerID = customer_id) %>%
left_join(
customer_habits_joined_tbl
) %>%
select(CustomerID, everything())
customer_clusters_tbl
cluster_morphology_tbl <- customer_clusters_tbl %>%
group_by(cluster) %>%
summarise_at(vars(count:LastPurchase), .funs = mean)
cluster_morphology_tbl
cluster_morphology_tbl %>%
select(cluster, count, sum, cat_0, cat_1, cat_2, cat_3, cat_4, cat_NA) %>%
ggRadar(aes(color = cluster), size = 1) +
facet_wrap(~ cluster) +
theme_minimal() +
scale_color_viridis_d(begin = 0.25) +
scale_fill_viridis_d(begin = 0.25) +
labs(title = "Customer Morphology") +
theme(
plot.background  = element_rect(fill = "black"),
panel.background = element_rect(fill = "black"),
legend.position  = "none",
text = element_text(color = "white"),
axis.text = element_text(color = "grey80")
)
product_clusters_tbl %>% write_rds("preprocessing/product_clusters_tbl.rds")
read_rds("preprocessing/product_clusters_tbl.rds")
read_rds("preprocessing/product_clusters_tbl.rds")
# Time Series
library(lubridate)
library(timetk)
# Text
library(tidytext)
# Visualization
library(plotly)
library(ggwordcloud)
library(ggiraphExtra)
# Core
library(tidyverse)
library(tidyquant)
library(reticulate)
# Replace this with your conda environment containing sklearn, pandas, & numpy
use_condaenv("py3.8", required = TRUE)
ecommerce_raw_tbl <- read_csv("data/ecommerce_data.csv")
ecommerce_raw_tbl
ecommerce_tbl <- ecommerce_raw_tbl %>%
mutate(InvoiceDate = mdy_hms(InvoiceDate)) %>%
select(contains("ID"), contains("Invoice"), everything()) %>%
mutate(CustomerID = as.character(CustomerID)) %>%
filter(UnitPrice > 0) %>%
mutate(PriceExt = Quantity * UnitPrice)
ecommerce_tbl %>% glimpse()
summarize_by <- "day"
ecommerce_tbl %>%
summarise_by_time(InvoiceDate, .by = summarize_by, revenue = sum(PriceExt)) %>%
plot_time_series(InvoiceDate, revenue, .smooth_period = "3 months")
products_raw_tbl <- ecommerce_raw_tbl %>%
select(StockCode, Description, UnitPrice) %>%
distinct() %>%
arrange(desc(StockCode))
products_raw_tbl
products_raw_tbl %>% filter(StockCode == "21786")
mode <- function(x) {
as.character(x) %>%
table() %>%
sort(decreasing = TRUE) %>%
names() %>%
.[1]
}
products_summarized_tbl <- products_raw_tbl %>%
filter(!is.na(Description)) %>%
group_by(StockCode) %>%
summarise(
n = n(),
median_unit_price = median(UnitPrice),
mode_description  = mode(Description)
) %>%
ungroup()
products_summarized_tbl
products_summarized_tbl %>%
arrange(desc(n))
products_summarized_tbl %>%
filter(!StockCode %in% c("DOT", "M", "POST", "D", "S", "AMAZONFEE", "BANK CHARGES")) %>%
arrange(desc(n))
products_summarized_tbl %>%
filter(!StockCode %in% c("DOT", "M", "POST", "D", "S", "AMAZONFEE", "BANK CHARGES")) %>%
arrange(median_unit_price) %>%
filter(median_unit_price > 0)
products_filtered_tbl <- products_summarized_tbl %>%
filter(!StockCode %in% c("DOT", "M", "POST", "D", "S", "AMAZONFEE", "BANK CHARGES", "CRUK")) %>%
filter(median_unit_price > 0)
products_filtered_tbl
products_filtered_tbl %>%
ggplot(aes(median_unit_price)) +
geom_histogram()
products_filtered_tbl %>%
ggplot(aes(log(median_unit_price))) +
geom_histogram()
product_dictionary_raw_tbl <- products_filtered_tbl %>%
select(StockCode, mode_description) %>%
unnest_tokens(terms, mode_description, token = "words") %>%
mutate(terms = hunspell::hunspell_stem(terms)) %>%
unnest(terms) %>%
mutate(n = 1)
product_dictionary_raw_tbl
term_frequency_tbl <- product_dictionary_raw_tbl %>%
# Remove unnecessary terms
anti_join(stop_words, by = c("terms" = "word")) %>%
filter(!terms %in% colors()) %>%
filter(!terms %>% str_detect(pattern = "[0-9]")) %>%
# Summarize
group_by(terms) %>%
summarise(
n = sum(n)
) %>%
arrange(desc(n))
term_frequency_tbl
g <- term_frequency_tbl %>%
slice(1:40) %>%
mutate(terms = as_factor(terms) %>% fct_rev()) %>%
ggplot(aes(n, terms)) +
geom_point() +
expand_limits(x = 0)
ggplotly(g)
term_frequency_tbl %>%
slice(1:100) %>%
mutate(terms = as_factor(terms) %>% fct_rev()) %>%
ggplot() +
geom_text_wordcloud_area(aes(label = terms, size = n, color = n)) +
scale_size_area(max_size = 14) +
scale_color_viridis_c(direction = -1) +
theme(plot.background  = element_rect(fill = "black"),
panel.background = element_rect(fill = "black"))
top_100_terms <- term_frequency_tbl %>% slice(1:100) %>% pull(terms)
product_text_features_tbl <- product_dictionary_raw_tbl %>%
filter(terms %in% top_100_terms) %>%
pivot_wider(
names_from  = terms,
values_from = n,
values_fill = list(n = 0),
values_fn   = list(n = sum)
)
product_text_features_tbl
products_joined_tbl <- products_filtered_tbl %>%
left_join(product_text_features_tbl) %>%
drop_na()
products_joined_tbl
library(recipes)
recipe_spec_products <- recipe(~ ., data = products_joined_tbl) %>%
step_rm(StockCode, n, mode_description) %>%
step_log(median_unit_price, offset = 1) %>%
step_range(median_unit_price) %>%
prep()
recipe_spec_products
X           <- recipe_spec_products %>% juice() %>% as.matrix()
stock_code  <- products_joined_tbl %>% pull(StockCode)
rownames(X) <- stock_code
X[1:10, 1:10]
cluster_assignments <- py$cluster_assignments_km
product_clusters_tbl <- py$X_embedded %>%
as_tibble() %>%
mutate(cluster = as.factor(cluster_assignments)) %>%
mutate(StockCode = stock_code) %>%
left_join(
products_joined_tbl %>%
select(StockCode, median_unit_price, mode_description)
) %>%
select(StockCode, median_unit_price, mode_description, everything())
product_clusters_tbl
cluster_assignments <- py$cluster_assignments_km
product_clusters_tbl <- py$X_embedded %>%
as_tibble() %>%
mutate(cluster = as.factor(cluster_assignments)) %>%
mutate(StockCode = stock_code) %>%
left_join(
products_joined_tbl %>%
select(StockCode, median_unit_price, mode_description)
) %>%
select(StockCode, median_unit_price, mode_description, everything())
product_clusters_tbl
g <- product_clusters_tbl %>%
mutate(mode_description = str_remove_all(mode_description, "[^A-Za-z0-9 -]")) %>%
mutate(tooltip = str_glue("Desc: {mode_description}
Price: {median_unit_price}")) %>%
ggplot(aes(V1, V2, color = cluster)) +
geom_point(aes(text = tooltip), alpha = 0.7) +
scale_color_tq() +
theme_tq()
ggplotly(g, tooltip = "text")
term_frequency_tbl
term_freq_by_cluster_tbl <- product_clusters_tbl %>%
unnest_tokens(terms, mode_description, token = "words") %>%
mutate(terms = hunspell::hunspell_stem(terms)) %>%
unnest(terms) %>%
# Remove stop words
anti_join(stop_words, by = c("terms" = "word")) %>%
filter(!terms %in% colors()) %>%
filter(!terms %>% str_detect(pattern = "[0-9]")) %>%
# filter(!terms %>% str_detect("(set)|(heart)")) %>%
mutate(n = 1) %>%
# Group by cluster & select top N terms
group_by(cluster, terms) %>%
summarise(n = sum(n)) %>%
arrange(desc(n), .by_group = TRUE) %>%
slice(1:50)
term_freq_by_cluster_tbl <- product_clusters_tbl %>%
unnest_tokens(terms, mode_description, token = "words") %>%
mutate(terms = hunspell::hunspell_stem(terms)) %>%
unnest(terms) %>%
# Remove stop words
anti_join(stop_words, by = c("terms" = "word")) %>%
filter(!terms %in% colors()) %>%
filter(!terms %>% str_detect(pattern = "[0-9]")) %>%
# filter(!terms %>% str_detect("(set)|(heart)")) %>%
mutate(n = 1) %>%
# Group by cluster & select top N terms
group_by(cluster, terms) %>%
summarise(n = sum(n)) %>%
arrange(desc(n), .by_group = TRUE) %>%
slice(1:50)
term_freq_by_cluster_tbl
g <- term_freq_by_cluster_tbl %>%
slice(1:5) %>%
ungroup() %>%
arrange(desc(n)) %>%
mutate(terms = as_factor(terms) %>% fct_rev()) %>%
ggplot(aes(n, terms, color = cluster)) +
geom_point() +
expand_limits(x = 0) +
facet_wrap(~ cluster, ncol = 2, scales = "free_y") +
theme_tq() +
scale_color_tq() +
labs(y = "")
ggplotly(g)
term_freq_by_cluster_tbl %>%
ggplot() +
geom_text_wordcloud_area(aes(label = terms, size = n, color = cluster)) +
# scale_size_area(max_size = 15) +
scale_color_viridis_d(direction = -1) +
facet_wrap(~ cluster, ncol = 2) +
theme_minimal() +
theme(plot.background  = element_rect(fill = "black"),
panel.background = element_rect(fill = "black"))
transaction_product_clusters_tbl <- ecommerce_tbl %>%
filter(PriceExt > 0) %>%
left_join(
product_clusters_tbl %>%
group_by(StockCode) %>%
slice(1) %>%
ungroup()
) %>%
select(
CustomerID, InvoiceNo, InvoiceDate, StockCode, mode_description, cluster, PriceExt
)
transaction_product_clusters_tbl
customer_spend_habits_tbl <- transaction_product_clusters_tbl %>%
# Get spend by Invoice (Purchase)
group_by(CustomerID, InvoiceNo) %>%
summarize(order_value = SUM(PriceExt)) %>%
ungroup() %>%
# Aggregate by Customer ID
group_by(CustomerID) %>%
summarize(
count  = n(),
min    = MIN(order_value),
mean   = AVERAGE(order_value),
max    = MAX(order_value),
sum    = SUM(order_value)
) %>%
ungroup()
customer_spend_habits_tbl
customer_product_habits_tbl <- transaction_product_clusters_tbl %>%
select(CustomerID, PriceExt, cluster) %>%
group_by(CustomerID, cluster) %>%
summarize(PriceExt = SUM(PriceExt)) %>%
mutate(prop = PriceExt / SUM(PriceExt)) %>%
ungroup() %>%
select(-PriceExt) %>%
pivot_wider(names_from   = cluster,
values_from  = prop,
values_fill  = list(prop = 0),
names_prefix = "cat_")
customer_product_habits_tbl
max_date <- max(as_date(transaction_product_clusters_tbl$InvoiceDate))
customer_recency_habits_tbl <- transaction_product_clusters_tbl %>%
count(CustomerID, InvoiceDate) %>%
mutate(InvoiceDate = as_date(InvoiceDate)) %>%
group_by(CustomerID) %>%
summarise(
FirstPurchase = -1 * (min(InvoiceDate) - max_date)  / ddays(1),
LastPurchase  = -1 * (max(InvoiceDate) - max_date)  / ddays(1)
)
customer_recency_habits_tbl
customer_habits_joined_tbl <- customer_spend_habits_tbl %>%
left_join(customer_product_habits_tbl) %>%
left_join(customer_recency_habits_tbl)
customer_habits_joined_tbl
recipe_spec_customers <- recipe(~ ., data = customer_habits_joined_tbl) %>%
step_rm(CustomerID) %>%
step_log(all_predictors(), -contains("cat_"), offset = 1) %>%
step_range(all_predictors(), -contains("cat_")) %>%
prep()
recipe_spec_customers
recipe_spec_customers %>% juice()
X           <- recipe_spec_customers %>% juice() %>% as.matrix()
customer_id <- customer_habits_joined_tbl %>% pull(CustomerID)
rownames(X) <- customer_id
X[1:10, ]
cluster_assignments <- py$cluster_assignments_km
customer_clusters_tbl <- py$X_embedded %>%
as_tibble() %>%
mutate(cluster = as.factor(cluster_assignments)) %>%
mutate(CustomerID = customer_id) %>%
left_join(
customer_habits_joined_tbl
) %>%
select(CustomerID, everything())
customer_clusters_tbl
cluster_morphology_tbl <- customer_clusters_tbl %>%
group_by(cluster) %>%
summarise_at(vars(count:LastPurchase), .funs = mean)
cluster_morphology_tbl
cluster_morphology_tbl %>%
select(cluster, count, sum, cat_0, cat_1, cat_2, cat_3, cat_4, cat_NA) %>%
ggRadar(aes(color = cluster), size = 1) +
facet_wrap(~ cluster) +
theme_minimal() +
scale_color_viridis_d(begin = 0.25) +
scale_fill_viridis_d(begin = 0.25) +
labs(title = "Customer Morphology") +
theme(
plot.background  = element_rect(fill = "black"),
panel.background = element_rect(fill = "black"),
legend.position  = "none",
text = element_text(color = "white"),
axis.text = element_text(color = "grey80")
)
recipe_spec_customer_prediction <- recipe(cluster ~ ., customer_clusters_tbl) %>%
step_rm(CustomerID, V1, V2, count, min, max, sum, FirstPurchase, LastPurchase) %>%
step_log(mean) %>%
step_range(mean) %>%
step_mutate(cluster = as.integer(as.character(cluster))) %>%
prep()
recipe_spec_customer_prediction %>% juice()
X <- recipe_spec_customer_prediction %>%
juice() %>%
select(-cluster) %>%
as.matrix()
Y <- recipe_spec_customer_prediction %>%
juice() %>%
pull(cluster)
X[1:10, ]
Y[1:10]
cluster_assignments <- py$cluster_assignments_km
customer_clusters_tbl <- py$X_embedded %>%
as_tibble() %>%
mutate(cluster = as.factor(cluster_assignments)) %>%
mutate(CustomerID = customer_id) %>%
left_join(
customer_habits_joined_tbl
) %>%
select(CustomerID, everything())
customer_clusters_tbl
cluster_morphology_tbl <- customer_clusters_tbl %>%
group_by(cluster) %>%
summarise_at(vars(count:LastPurchase), .funs = mean)
cluster_morphology_tbl
recipe_spec_customer_prediction <- recipe(cluster ~ ., customer_clusters_tbl) %>%
step_rm(CustomerID, V1, V2, min, max, sum, FirstPurchase, LastPurchase) %>%
step_log(mean) %>%
step_range(mean) %>%
step_mutate(cluster = as.integer(as.character(cluster))) %>%
prep()
recipe_spec_customer_prediction %>% juice()
X <- recipe_spec_customer_prediction %>%
juice() %>%
select(-cluster) %>%
as.matrix()
Y <- recipe_spec_customer_prediction %>%
juice() %>%
pull(cluster)
X[1:10, ]
Y[1:10]
recipe_spec_customer_prediction <- recipe(cluster ~ ., customer_clusters_tbl) %>%
step_rm(CustomerID, V1, V2, min, max, mean, FirstPurchase, LastPurchase) %>%
step_log(mean) %>%
step_range(mean) %>%
step_mutate(cluster = as.integer(as.character(cluster))) %>%
prep()
recipe_spec_customer_prediction <- recipe(cluster ~ ., customer_clusters_tbl) %>%
step_rm(CustomerID, V1, V2, min, max, mean, FirstPurchase, LastPurchase) %>%
step_log(sum) %>%
step_range(sum) %>%
step_mutate(cluster = as.integer(as.character(cluster))) %>%
prep()
recipe_spec_customer_prediction %>% juice()
X <- recipe_spec_customer_prediction %>%
juice() %>%
select(-cluster) %>%
as.matrix()
Y <- recipe_spec_customer_prediction %>%
juice() %>%
pull(cluster)
X[1:10, ]
Y[1:10]
recipe_spec_customer_prediction <- recipe(cluster ~ ., customer_clusters_tbl) %>%
step_rm(CustomerID, V1, V2, min, max, mean, FirstPurchase, LastPurchase) %>%
step_log(sum) %>%
step_range(sum) %>%
step_mutate(cluster = as.integer(as.character(cluster))) %>%
prep()
recipe_spec_customer_prediction %>% juice()
X <- recipe_spec_customer_prediction %>%
juice() %>%
select(-cluster) %>%
as.matrix()
Y <- recipe_spec_customer_prediction %>%
juice() %>%
pull(cluster)
X[1:10, ]
Y[1:10]
recipe_spec_customer_prediction <- recipe(cluster ~ ., customer_clusters_tbl) %>%
step_rm(CustomerID, V1, V2, min, max, sum, FirstPurchase, LastPurchase) %>%
step_log(mean) %>%
step_range(mean) %>%
step_mutate(cluster = as.integer(as.character(cluster))) %>%
prep()
recipe_spec_customer_prediction %>% juice()
X <- recipe_spec_customer_prediction %>%
juice() %>%
select(-cluster) %>%
as.matrix()
Y <- recipe_spec_customer_prediction %>%
juice() %>%
pull(cluster)
X[1:10, ]
Y[1:10]
repl_python()
